{"version":3,"sources":["../../../src/server/controllers/UserController.js"],"names":["UserModel","require","TreeModel","generateJWT","bcrypt","signup","req","res","userName","email","password","color","body","isExist","ok","status","json","msg","trees","find","owner","limit","treeOne","treeTwo","treeThree","treesArray","Array","_id","leaves","user","create","tree","randomName","userObject","history","username","date","Date","toDateString","name","updateOne","$set","token","uid","err","console","log","message","login","findOne","validPassword","compareSync","length","generateToken","module","exports"],"mappings":"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","sourcesContent":["const UserModel = require('../models/UserModel')\nconst TreeModel = require('../models/TreeSchema')\nconst {generateJWT} = require('../helpers/jwt')\nconst bcrypt = require('bcrypt');\nimport {getLeaves} from '../helpers/getLeaves'\nimport {nameByRace} from \"fantasy-name-generator\";\nimport {verifyUser} from '../helpers/verifyUser';\nimport {getUser} from '../helpers/getUser';\n\n\n\nconst signup = async (req, res) => {\n\n    const {userName, email, password, color} = req.body\n\n    try {\n        //Check if username or email exist\n        const isExist = await verifyUser(userName, email)\n\n        if(!isExist.ok){\n            res.status(400).json({msg: isExist.msg})\n            return\n        }\n\n        //Search trees without owner\n        const trees = await TreeModel.find({owner: null}).limit(3)\n        const [treeOne, treeTwo, treeThree] = trees\n        const treesArray = new Array(treeOne._id, treeTwo._id, treeThree._id)\n\n        //Give leaves \n        const leaves = await getLeaves();\n\n        //Create user\n        const user = await UserModel.create({userName, email, password, trees: treesArray, color, leaves})\n\n\n\n        //Add history , owner and random name to trees\n        for(let tree of trees){\n            const randomName = nameByRace(\"elf\")\n            const userObject = {\n                owner: user._id,\n                history: [...tree.history, { username: user.userName, date: new Date().toDateString(), name: randomName}]\n            }\n            const res = await TreeModel.updateOne({ _id:tree._id}, { $set: userObject})\n        }\n\n        const token = await generateJWT(user._id)\n       \n        \n        res.status(201).json({token, userName: user.userName, uid: user._id})\n        \n    } catch(err){\n        console.log(err)\n        res.status(400).json({err:err.message});\n    }\n}\n\nconst login = async (req, res) =>{\n\n    const {userName, password} = req.body\n\n    try{\n        const user = await UserModel.findOne({userName})\n\n        if(!user){\n            res.status(404).json({err: \"User not found\"})\n            return \n        }\n        \n        const validPassword = bcrypt.compareSync(password, user.password)\n\n        if(!validPassword){\n            res.status(400).json({err: \"Bad password\"})\n            return \n        }\n\n        const token = await generateJWT(user._id, userName)\n        res.status(200).json({\n            token, \n            userName, \n            uid: user._id, \n            leaves: user.leaves,\n            trees: user.trees.length \n        })\n\n    } catch (err) {\n        console.log(err)\n        res.status(500).json({err: err.message})\n    }   \n}\n\nconst generateToken = async (req, res) => {\n    const uid = req.uid\n    const username = req.username\n    \n    try{\n            const token = await generateJWT(uid, username)\n            const {color, leaves, trees} = await getUser(uid)\n            res.status(200).json({token, uid, username, color, leaves, trees: trees.length})\n\n    } catch(err){\n        console.log(err)\n    }\n}\n\n\nmodule.exports = {\n    signup,\n    login,\n    generateToken\n}"],"file":"UserController.js"}