{"version":3,"sources":["../../../src/server/controllers/UserController.js"],"names":["UserModel","require","TreeModel","GamelogModel","generateJWT","bcrypt","signup","req","res","userName","email","password","color","body","isExist","ok","status","json","err","trees","find","owner","limit","treeOne","treeTwo","treeThree","treesArray","Array","_id","treesCount","length","leaves","user","create","tree","randomName","userObject","history","username","date","Date","toDateString","name","updateOne","$set","actions","token","uid","console","log","login","findOne","validPassword","compareSync","generateToken","getLeaderboard","users","select","sort","getActions","createdAt","editColor","findByIdAndUpdate","new","module","exports"],"mappings":"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","sourcesContent":["const UserModel = require('../models/UserModel')\nconst TreeModel = require('../models/TreeSchema')\nconst GamelogModel = require('../models/GamelogSchema')\n\nconst {generateJWT} = require('../helpers/jwt')\nconst bcrypt = require('bcrypt');\nimport {getLeaves} from '../helpers/getLeaves'\nimport {nameByRace} from \"fantasy-name-generator\";\nimport {verifyUser} from '../helpers/verifyUser';\nimport {getUser} from '../helpers/getUser';\n\n\n\nconst signup = async (req, res) => {\n\n    const {userName, email, password, color} = req.body\n\n    try {\n        //Check if username or email exist\n        const isExist = await verifyUser(userName, email)\n\n        if(!isExist.ok){\n            res.status(400).json({err: isExist.err})\n            return\n        }\n\n        //Search trees without owner\n        const trees = await TreeModel.find({owner: null}).limit(3)\n        const [treeOne, treeTwo, treeThree] = trees\n        const treesArray = new Array(treeOne._id, treeTwo._id, treeThree._id)\n        const treesCount = treesArray.length\n        //Give leaves \n        const leaves = await getLeaves();\n\n        //Create user\n        const user = await UserModel.create({userName, email, password, trees: treesArray, treesCount, color, leaves})\n\n\n\n        //Add history , owner and random name to trees\n        for(let tree of trees){\n            const randomName = nameByRace(\"elf\")\n            const userObject = {\n                owner: user._id,\n                history: [...tree.history, { username: user.userName, date: new Date().toDateString(), name: randomName}]\n            }\n            await TreeModel.updateOne({ _id:tree._id}, { $set: userObject})\n        }\n        await GamelogModel.create({actions: `Welcome ${userName} ðŸ‘‹`})\n        const token = await generateJWT(user._id)\n        \n        res.status(201).json({token, userName: user.userName, uid: user._id})\n        \n    } catch(err){\n        console.log(err)\n        res.status(500).json({err: \"Server error, Try again later\"});\n    }\n}\n\nconst login = async (req, res) =>{\n\n    const {userName, password} = req.body\n\n\n    try{\n        const user = await UserModel.findOne({userName})\n\n\n        if(!user){\n            res.status(404).json({err: \"Wrong username or password.\"})\n            return \n        }\n        \n        const validPassword = bcrypt.compareSync(password, user.password)\n\n        if(!validPassword){\n            res.status(400).json({err: \"Wrong username or password.\"})\n            return \n        }\n\n        await GamelogModel.create({actions: `${user.userName} is connected ðŸ˜Ž`})\n        const token = await generateJWT(user._id, user.userName)\n        res.status(200).json({\n            token, \n            userName: user.userName,\n            uid: user._id, \n            leaves: user.leaves,\n            trees: user.trees.length,\n            color: user.color \n        })\n\n    } catch (err) {\n        console.log(err)\n        res.status(500).json({err: \"Server error, Try again later\"})\n    }   \n}\n\nconst generateToken = async (req, res) => {\n    const uid = req.uid\n    const username = req.username\n    \n    try{\n            const token = await generateJWT(uid, username)\n            const {color, leaves, trees} = await getUser(uid)\n            await GamelogModel.create({actions: `${username} is connected ðŸ˜Ž`})\n            res.status(200).json({token, uid, username, color, leaves, trees: trees.length})\n\n    } catch(err){\n        res.status(500).json({err: \"Server error, Try again later\"})\n    }\n}\n\nconst getLeaderboard = async (req, res) => {\n\n    try{\n        const users = await UserModel.find().select({userName: 1, treesCount: 1}).sort({treesCount: -1}).limit(10)\n        res.status(200).json({users: users})\n    } catch (err) {\n        res.status(500).json({err: \"Server error, Try again later\"})\n    }\n}\n\nconst getActions = async (req, res) => {\n\n    try {\n        const actions = await GamelogModel.find().select({actions: 1}).sort({createdAt: -1}).limit(10)\n        res.status(200).json({actions})\n    } catch (err) {\n        res.status(500).json({err: \"Server error, Try again later\"})\n    }\n}\n\nconst editColor = async (req, res) => {\n\n    const {uid, color} = req.body\n\n    \n    try {\n        const user = await UserModel.findByIdAndUpdate(\n            { _id: uid }, \n            { $set: {color: color} },\n            { new: true }\n        ).select({color: 1})\n\n        res.status(200).json({user, ok:true})\n\n    } catch(err) {\n        console.log(err)\n        res.status(500).json({err: \"Server error, Try again later\"})\n    }\n}\n\n\nmodule.exports = {\n    signup,\n    login,\n    generateToken,\n    getLeaderboard,\n    getActions,\n    editColor\n}"],"file":"UserController.js"}