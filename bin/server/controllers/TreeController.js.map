{"version":3,"sources":["../../../src/server/controllers/TreeController.js"],"names":["TreeModel","require","UserModel","ObjectId","getAllTrees","req","res","trees","find","status","json","err","message","console","log","getOneTree","id","params","findTreesInRadius","tree","findById","populate","exec","treesInRadius","buyTree","userName","body","price","randomName","gender","locked","owner","userLeaves","userId","isInclude","userTrees","history","push","user","findOneAndUpdate","leaves","_id","name","date","Date","new","ok","addComment","comments","newMessage","username","findByIdAndUpdate","getTreesPositions","lat","lon","treesFormated","Array","forEach","newTree","loc","lockTree","msg","module","exports"],"mappings":"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","sourcesContent":["const TreeModel = require('../models/TreeSchema');\nconst UserModel = require('../models/UserModel');\nconst ObjectId = require('mongodb').ObjectId;\nimport {nameByRace} from \"fantasy-name-generator\";\nimport {getUserLeaves} from '../helpers/getUserLeaves';\nimport {getTreesUser} from '../helpers/getTreesUser';\nimport {getHistory} from '../helpers/getHistory';\nimport {getTreesInRadius} from '../helpers/getTreesInRadius'\nimport {removeTree} from '../helpers/removeTree'\n\n\n\n\nconst getAllTrees = async (req, res) => {\n\n    try{\n        const trees = await TreeModel.find()\n        res.status(200).json({trees})\n    } catch(err) {\n        res.status(500).json({err: err.message})\n        console.log(err)\n    }\n}\n\nconst getOneTree = async (req, res) => {\n\n    const id = req.params.id\n    \n    try{\n        \n        const findTreesInRadius = await getTreesInRadius(id)\n        const tree = await TreeModel.findById(id).populate(\"owner\", \"userName\").exec()\n        res.status(200).json({tree, treesInRadius: findTreesInRadius})\n\n    } catch(err){\n        res.status(404).json({err: \"Id not found...\"})\n        console.log(err);\n    }\n}\n\nconst buyTree = async (req,res) => {\n\n    const id = req.params.id\n    const userName = req.body.userName\n    const price = req.body.price\n    \n\n    try {\n        const randomName = nameByRace(\"elf\", { gender: \"female\" })\n        const {locked, owner} = await TreeModel.findById(id)\n        const {userLeaves, userId} = await getUserLeaves(userName)\n        const {isInclude, userTrees} = await getTreesUser(userName, id)\n        const history = await getHistory(id)\n        \n        if(isInclude) {\n            res.status(400).json({message: \"You have already this tree.\"})\n            return\n        }\n\n        if(userLeaves >= price && !locked) {\n            if(owner){\n                await removeTree(owner, id)\n            }\n\n            userTrees.push(ObjectId(id))\n            const user = await UserModel.findOneAndUpdate({userName: userName}, {trees: userTrees, leaves: userLeaves - price})\n            const tree = await TreeModel.findOneAndUpdate({_id: id}, {owner: userId, name: randomName, price: price, history: [...history, {userName, date: new Date()}]}, {new: true})\n            res.status(200).json({message: \"You have a new tree\", ok:true, tree})\n            return\n        }\n\n        res.status(400).json({message: \"You don't have the leaves to buy a tree.\"})\n\n    } catch(err) {\n        res.status(400).json({message: err})\n        console.log(err)\n    }\n}\n\nconst addComment = async (req,res) => {\n\n    const id = req.params.id\n    const message = req.body.message\n    const userName = req.body.userName\n\n    try{\n        const {comments} = await TreeModel.findById(id)\n        const newMessage = {username: userName, message: message}\n        \n        if(message){\n            const tree = await TreeModel.findByIdAndUpdate(id, {comments: [...comments, newMessage]})\n            res.status(200).json({message: \"Comment added.\"})\n            return\n        }\n\n        res.status(400).json({message: \"Please fill the comment.\"})\n\n    } catch(err) {\n        console.log(err)\n    }\n}\n\nconst getTreesPositions = async (req, res) => {\n\n    try {\n        const trees = await TreeModel.find({}, { lat: 1, lon: 1 })\n        \n        let treesFormated = new Array()\n        trees.forEach(tree => {\n            const newTree = {\n                id: tree._id,\n                loc: [tree.lat, tree.lon]\n            }\n            treesFormated.push(newTree)\n        });\n        res.status(200).json({trees: treesFormated})\n    } catch(err) {\n        console.log(err)\n    }\n}\n\nconst lockTree = async (req, res) => {\n\n    const id = req.params.id\n    const userName = req.username\n    const {isInclude} = await getTreesUser(userName, id)\n\n    try{\n        if(!isInclude){\n            res.status(400).json({msg: \"You don't own this tree !\"})\n            return\n        }\n\n        await TreeModel.findOneAndUpdate({_id: id}, {locked: true})\n        res.status(200).json({msg: \"The tree is locked.\"})\n\n    } catch (err) {\n        res.status(400).json({msg: err})\n    }\n}\n\nmodule.exports = {\n    getAllTrees,\n    getOneTree,\n    buyTree,\n    addComment,\n    getTreesPositions,\n    lockTree\n}"],"file":"TreeController.js"}