{"version":3,"sources":["../../../src/server/controllers/TreeController.js"],"names":["TreeModel","require","UserModel","ObjectId","GamelogModel","getAllTrees","req","res","trees","find","status","json","err","message","console","log","getOneTree","id","params","findTreesInRadius","tree","findById","populate","exec","treesInRadius","buyTree","userName","username","price","body","randomName","gender","locked","owner","userLeaves","userId","isInclude","userTrees","history","treesCount","length","push","findOneAndUpdate","leaves","_id","name","date","Date","new","create","actions","ok","addComment","comments","newMessage","findByIdAndUpdate","getTreesPositions","lat","lon","treesFormated","Array","forEach","newTree","loc","lockTree","lockedPrice","msg","module","exports"],"mappings":"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","sourcesContent":["const TreeModel = require('../models/TreeSchema');\nconst UserModel = require('../models/UserModel');\nconst ObjectId = require('mongodb').ObjectId;\nconst GamelogModel = require('../models/GamelogSchema')\nimport {nameByRace} from \"fantasy-name-generator\";\nimport {getUserLeaves} from '../helpers/getUserLeaves';\nimport {getTreesUser} from '../helpers/getTreesUser';\nimport {getHistory} from '../helpers/getHistory';\nimport {getTreesInRadius} from '../helpers/getTreesInRadius'\nimport {removeTree} from '../helpers/removeTree'\n\n\n\n\nconst getAllTrees = async (req, res) => {\n\n    try{\n        const trees = await TreeModel.find()\n        res.status(200).json({trees})\n    } catch(err) {\n        res.status(500).json({err: err.message})\n        console.log(err)\n    }\n}\n\nconst getOneTree = async (req, res) => {\n\n    const id = req.params.id\n    \n    try{\n        \n        const findTreesInRadius = await getTreesInRadius(id)\n        const tree = await TreeModel.findById(id).populate(\"owner\", \"userName\").exec()\n        res.status(200).json({tree, treesInRadius: findTreesInRadius})\n\n    } catch(err){\n        res.status(404).json({err: \"Id not found...\"})\n        console.log(err);\n    }\n}\n\nconst buyTree = async (req,res) => {\n\n    const id = req.params.id\n    const userName = req.username\n    const price = req.body.price\n    \n\n    try {\n        const randomName = nameByRace(\"elf\", { gender: \"female\" })\n        const {locked, owner} = await TreeModel.findById(id)\n        const {userLeaves, userId} = await getUserLeaves(userName)\n        const {isInclude, userTrees} = await getTreesUser(userName, id)\n        const history = await getHistory(id)\n        const treesCount = userTrees.length\n        \n        if(isInclude) {\n            res.status(400).json({message: \"You have already this tree.\"})\n            return\n        }\n\n        if(userLeaves >= price && !locked) {\n            if(owner){\n                await removeTree(owner, id)\n            }\n\n            userTrees.push(ObjectId(id))\n            await UserModel.findOneAndUpdate({userName: userName}, {trees: userTrees, leaves: userLeaves - price, treesCount: treesCount + 1})\n            const tree = await TreeModel.findOneAndUpdate({_id: id}, {owner: userId, name: randomName, price: price, history: [...history, {userName, date: new Date()}]}, {new: true})\n            await GamelogModel.create({actions: `${userName} bought a tree ðŸ¤‘`})\n            res.status(200).json({message: \"You have a new tree\", ok:true, tree})\n            return\n        }\n\n        res.status(400).json({message: \"You don't have the leaves to buy a tree.\"})\n\n    } catch(err) {\n        res.status(400).json({message: err})\n        console.log(err)\n    }\n}\n\nconst addComment = async (req,res) => {\n\n    const id = req.params.id\n    const userName = req.username\n    const message = req.body.message\n\n    try{\n        const {comments} = await TreeModel.findById(id)\n        const newMessage = {username: userName, message: message}\n        \n        if(message){\n            const tree = await TreeModel.findByIdAndUpdate(id, {comments: [...comments, newMessage]})\n            res.status(200).json({message: \"Comment added.\", ok:true})\n            return\n        }\n\n        res.status(400).json({message: \"Please fill the comment.\"})\n\n    } catch(err) {\n        console.log(err)\n    }\n}\n\nconst getTreesPositions = async (req, res) => {\n\n    try {\n        const trees = await TreeModel.find({}, { lat: 1, lon: 1})\n        \n        let treesFormated = new Array()\n        trees.forEach(tree => {\n            const newTree = {\n                id: tree._id,\n                loc: [tree.lat, tree.lon]\n            }\n            treesFormated.push(newTree)\n        });\n        res.status(200).json({trees: treesFormated})\n    } catch(err) {\n        console.log(err)\n    }\n}\n\nconst lockTree = async (req, res) => {\n\n    const id = req.params.id\n    const userName = req.username\n    const lockedPrice = req.body.price\n\n    const {isInclude} = await getTreesUser(userName, id)\n    const {userLeaves} = await getUserLeaves(userName)\n\n\n    try{\n        if(!isInclude){\n            res.status(400).json({msg: \"You don't own this tree !\"})\n            return\n        }\n        if(userLeaves < lockedPrice){\n            res.status(400).json({msg: \"You don't have the money to lock this tree !\"})\n            return\n        }\n\n        await UserModel.findOneAndUpdate({userName: userName}, {leaves: userLeaves - lockedPrice})\n        const tree = await TreeModel.findOneAndUpdate({_id: id}, {locked: true})\n        await GamelogModel.create({actions: `${userName} locked a tree ðŸ”’`})\n        res.status(200).json({msg: \"The tree is locked.\", ok:true, tree})\n\n    } catch (err) {\n        console.log(err)\n    }\n}\n\nmodule.exports = {\n    getAllTrees,\n    getOneTree,\n    buyTree,\n    addComment,\n    getTreesPositions,\n    lockTree\n}"],"file":"TreeController.js"}