{"version":3,"sources":["../../../src/server/models/UserModel.js"],"names":["mongoose","require","isEmail","bcrypt","userSchema","Schema","userName","type","String","required","unique","minLength","maxLength","lowercase","trim","email","validate","password","max","color","leaves","Number","trees","Array","treesCount","timestamps","pre","next","salt","genSalt","hash","UserModel","model","module","exports"],"mappings":";;AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAcD,OAAO,CAAC,WAAD,CAA3B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAMG,UAAU,GAAG,IAAIJ,QAAQ,CAACK,MAAb,CACf;AACIC,EAAAA,QAAQ,EAAG;AACPC,IAAAA,IAAI,EAACC,MADE;AAEPC,IAAAA,QAAQ,EAAE,IAFH;AAGPC,IAAAA,MAAM,EAAE,IAHD;AAIPC,IAAAA,SAAS,EAAE,CAJJ;AAKPC,IAAAA,SAAS,EAAE,EALJ;AAMPC,IAAAA,SAAS,EAAE,IANJ;AAOPC,IAAAA,IAAI,EAAE;AAPC,GADf;AAUIC,EAAAA,KAAK,EAAG;AACJR,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,QAAQ,EAAE,IAFN;AAGJO,IAAAA,QAAQ,EAAE,CAACd,OAAD,CAHN;AAIJQ,IAAAA,MAAM,EAAE,IAJJ;AAKJG,IAAAA,SAAS,EAAE,IALP;AAMJC,IAAAA,IAAI,EAAE;AANF,GAVZ;AAkBIG,EAAAA,QAAQ,EAAG;AACPV,IAAAA,IAAI,EAAEC,MADC;AAEPC,IAAAA,QAAQ,EAAE,IAFH;AAGPS,IAAAA,GAAG,EAAE,IAHE;AAIPP,IAAAA,SAAS,EAAE,CAJJ;AAKPG,IAAAA,IAAI,EAAE;AALC,GAlBf;AAyBIK,EAAAA,KAAK,EAAG;AACJZ,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,QAAQ,EAAE;AAFN,GAzBZ;AA6BIW,EAAAA,MAAM,EAAG;AACLb,IAAAA,IAAI,EAAEc;AADD,GA7Bb;AAgCIC,EAAAA,KAAK,EAAG;AACJf,IAAAA,IAAI,EAAEgB;AADF,GAhCZ;AAmCIC,EAAAA,UAAU,EAAE;AACRjB,IAAAA,IAAI,EAAEc;AADE;AAnChB,CADe,EAwCf;AACII,EAAAA,UAAU,EAAE;AADhB,CAxCe,CAAnB;AA8CArB,UAAU,CAACsB,GAAX,CAAe,MAAf,EAAuB,gBAAeC,IAAf,EAAoB;AACvC,QAAMC,IAAI,GAAG,MAAMzB,MAAM,CAAC0B,OAAP,EAAnB;AACA,OAAKZ,QAAL,GAAgB,MAAMd,MAAM,CAAC2B,IAAP,CAAY,KAAKb,QAAjB,EAA2BW,IAA3B,CAAtB;AACAD,EAAAA,IAAI;AACP,CAJD;AAMA,MAAMI,SAAS,GAAG/B,QAAQ,CAACgC,KAAT,CAAe,MAAf,EAAuB5B,UAAvB,CAAlB;AAEA6B,MAAM,CAACC,OAAP,GAAiBH,SAAjB","sourcesContent":["const mongoose = require('mongoose');\nconst { isEmail } = require('validator');\nconst bcrypt = require('bcrypt');\n\nconst userSchema = new mongoose.Schema(\n    {\n        userName : {\n            type:String,\n            required: true,\n            unique: true,\n            minLength: 4,\n            maxLength: 10,\n            lowercase: true,\n            trim: true\n        },\n        email : {\n            type: String,\n            required: true,\n            validate: [isEmail],\n            unique: true,\n            lowercase: true,\n            trim: true,\n        },\n        password : {\n            type: String,\n            required: true,\n            max: 1024,\n            minLength: 6,\n            trim: true\n        },\n        color : {\n            type: String,\n            required: true\n        },\n        leaves : {\n            type: Number,\n        },\n        trees : {\n            type: Array\n        },\n        treesCount: {\n            type: Number\n        }\n    },\n    {\n        timestamps: true,\n    }\n)\n\n\nuserSchema.pre(\"save\", async function(next){\n    const salt = await bcrypt.genSalt();\n    this.password = await bcrypt.hash(this.password, salt);\n    next();\n})\n\nconst UserModel = mongoose.model('User', userSchema);\n\nmodule.exports = UserModel;"],"file":"UserModel.js"}